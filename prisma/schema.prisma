generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Allergens {
  ID             Int              @id @default(autoincrement())
  allergy        String?          @db.VarChar(255)
  User_Allergies User_Allergies[]
}

model Category {
  ID   Int     @id @default(autoincrement())
  name String? @db.VarChar(255)
}

model Cuisine {
  ID           Int     @id @default(autoincrement())
  cuisine_type String? @db.VarChar(255)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model Weekly_Recipe {
  week        Int
  year        Int
  id_recipe   Int
  recipe_name String
  id_user     Int
  users       users? @relation(fields: [id_user], references: [ID], onDelete: Restrict, onUpdate: Restrict, map: "Weekly_Recipe_ibfk_1")

  @@id([week, year, id_user])
}

model users {
  ID              Int              @id @default(autoincrement())
  username        String           @unique @db.VarChar(255)
  email           String           @unique @db.VarChar(255)
  servings        Int
  notion_api_key  String?          @db.VarChar(255)
  profile_picture String?          @db.LongText
  created_at      DateTime         @default(now()) @db.Timestamp(0)
  id_meal_type    Int?
  id_measure     Int?              @default(2)
  Weekly_Recipe   Weekly_Recipe[]
  User_Allergies  User_Allergies[]
  User_Diet       User_Diet[]

  meal_type meal_type? @relation(fields: [id_meal_type], references: [ID], onDelete: Restrict, onUpdate: Restrict, map: "User_Meal_Type")
  measure measure? @relation(fields: [id_measure], references: [ID], onDelete: Restrict, onUpdate: Restrict, map: "User_Measures" )
}

model measure{
    ID              Int              @id @default(autoincrement())
      measure        String           @unique @db.VarChar(6)
        users users[]

  @@index([ID])
}

model User_Allergies {
  id_user    Int
  id_allergy Int

  Allergens Allergens? @relation(fields: [id_allergy], references: [ID], onDelete: Restrict, onUpdate: Restrict, map: "User_Allergy_ibfk_1")
  User      users?     @relation(fields: [id_user], references: [ID], onDelete: Restrict, onUpdate: Restrict, map: "User_Allergy_ibfk_2")

  @@id([id_user, id_allergy])
  @@index([id_user], map: "id_user")
  @@index([id_allergy], map: "id_allergy")
}

model Diet {
  ID        Int         @id @default(autoincrement())
  diet      String?     @db.VarChar(255)
  User_Diet User_Diet[]
}

model User_Diet {
  id_user Int
  id_diet Int

  User users? @relation(fields: [id_user], references: [ID], onDelete: Restrict, onUpdate: Restrict, map: "User_Diet_ibfk_1")
  Diet Diet?  @relation(fields: [id_diet], references: [ID], onDelete: Restrict, onUpdate: Restrict, map: "User_Diet_ibfk_2")

  @@id([id_user, id_diet])
  @@index([id_user], map: "id_user")
}

model meal_type {
  ID    Int     @id @default(autoincrement())
  name  String  @db.VarChar(255)
  users users[]

  @@index([ID])
}

model user_cuisine_type{
  id_user Int
  id_cuisine Int
  
  User users? @relation(fields: [id_user], references: [ID], onDelete: Restrict, onUpdate: Restrict, map: "User_Cuisine_ibfk_1")
  Cuisine Cuisine?  @relation(fields: [id_cuisine], references: [ID], onDelete: Restrict, onUpdate: Restrict, map: "User_Cuisine_ibfk_2")

  @@id([id_user, id_cuisine])
  @@index([id_user], map: "id_user")
}
